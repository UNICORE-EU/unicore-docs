.. _use-vo-howto:
   
VO (SAML) configuration HOWTOs
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

SAML and UNICORE - basic case
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This section shows all the steps which are required to setup a
UNICORE/X server and Unity to work as SAML attribute source.  In this
scenario we will use Unity to centrally store mappings of user DNs
to UNIX logins (Xlogins) and roles of of those users. The UNICORE/X
server will then query (pull) attributes from Unity, similar to using
an XUUDB.

.. note::
 We write UNICORE/X in the following, but any server based on the UNICORE
 Services Environment (Registry, Workflow, etc) works the same way.

The required steps are:
	
#. Add Unity's CA certificate to the UNICORE/X truststore (so SSL connections can be established).

#. Add UNICORE/X's CA certificate to the Unity server's truststore (so SSL connections can be 
   established).

#. Add the UNICORE/X server's DN (from its certificate) as a member to the Unity service. 
   You don't have to make it a member of any particular VO (or group). However it must have the 
   **read** permission to all groups where its users will be placed. In Unity, this corresponds 
   to the *Priviledged Inspector* role (check `Unity documentation 
   <https://www.unity-idm.eu/>`_ for details).

#. Check that UNICORE/X can properly authenticate to Unity on the SAML endpoint that is used to 
   query attributes. Generally this will be via the UNICORE/X certificate, if that is not 
   possible, you'll need to setup an additional username identity for the entity created in Step 
   3, and setup password authentication.

#. Create a VO (possibly with subgroups). Add users to the group.
   Here we will assume this group is */Math-VO/UUDB/SiteA*. 
   Next assign them *in the scope of the group* attribute
   ``urn:unicore:attrType:xlogin`` with the value of Unix UID for the user, and attribute 
   ``urn:unicore:attrType:role`` with the value of the user's role (usually its just ``user``).
   Note that if you want to assign the same Xlogin/role to multiple users then you can
   define Unity *group attributes* and set them for the whole */Math-VO/UUDB/SiteA* group.

#. Enable the SAML attribute source in the UNICORE server. Here we will configure it as 
   the primary source and leave XUUDB to provide local mappings (which can override data fetched 
   from Unity). You should have the following entries::

		container.security.attributes.order=SAML XUUDB
		container.security.attributes.combiningPolicy=MERGE_LAST_OVERRIDES
		# ...  xuudb configuration omitted

		container.security.attributes.SAML.class=eu.unicore.uas.security.saml.SAMLAttributeSource


#. Configure the SAML attribute source (typically in the ``saml.config``) file as follows::

		saml.group=/Math-VO/UUDB/SiteA

		saml.verifySignatures=true
		saml.truststore.type=directory
		saml.truststore.directoryLocations.1=/opt/unicore/certs/unity/*.pem

		saml.localServerURI=https://example.org:7777

		saml.cacheTtl=20
		
		saml.attributeQueryURL=https://unity.example.org/unicore-soapidp/saml2unicoreidp-soap/AssertionQueryService
		#saml.attributeQuery.username=UX-VENUS
		#saml.attributeQuery.password=the!njs!!

		# Mapping of Unity attributes (right side) to the special, recognized by UNICORE 
		#  incarnation attributes (left)  
		saml.unicoreAttribute.xlogin=urn:unicore:attrType:xlogin
		saml.unicoreAttribute.xlogin.default=urn:unicore:attrType:defaultXlogin
		saml.unicoreAttribute.role=urn:unicore:attrType:role
		saml.unicoreAttribute.role.default=urn:unicore:attrType:defaultRole
		saml.unicoreAttribute.group=urn:unicore:attrType:primaryGid
		saml.unicoreAttribute.group.default=urn:unicore:attrType:defaultPrimaryGid
		saml.unicoreAttribute.supplementaryGroups=urn:unicore:attrType:supplementaryGids
		saml.unicoreAttribute.supplementaryGroups.default=urn:unicore:attrType:defaultSupplementaryGids
		saml.unicoreAttribute.addDefaultGroups=urn:unicore:attrType:addDefaultGroups
		saml.unicoreAttribute.queue=urn:unicore:attrType:queue
		saml.unicoreAttribute.queue.default=urn:unicore:attrType:defaultQueue
		saml.unicoreAttribute.virtualOrganisations=urn:SAML:voprofile:group

#. In the SAML truststore directory (*/opt/unicore/certs/unity/* in this case) put
   the Unity certificate (NOT the CA certificate) as a PEM file, with pem extension.


(Very) advanced example: Unity and UNICORE - using fine grained authorization
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

In this scenario we will enhance the first one to use custom authorization attributes in UNICORE 
policy. To do so ensure that you have this setting in the ``saml.config`` file::
 
 saml.enableGenericAttributes=true 

Then you can modify the XACML policy to require certain VO attributes.

Important fact to note here is how the
user's group membership is encoded as an XACML attribute.  By default
it is an attribute of string type (so XACML
*DataType="http://www.w3.org/2001/XMLSchema#string"*) with its name
(*AttributeId*) equal to *urn:SAML:voprofile:group*. The example
policy below uses this attribute.

The following XACML fragment allows for reaching TargetSystemFactory service only for the users 
which are both members of VO *Example-VO* and a VO group */Math-VO/UUDB/SiteA*. Moreover, those 
users also must have a standard UNICORE/X attribute role with a value *user*. It means that in 
Unity, UNICORE users must have ``urn:unicore:attrType:role`` attribute defined (it is the 
standard setting) with a value *user*.
::

	<Rule RuleId="AcceptTSF" Effect="Permit">
	  <Description>
		Accept selected users to reach TSF
		</Description>
	  <Target>
		<Resources>
		  <Resource>
			<ResourceMatch MatchId="urn:oasis:names:tc:xacml:1.0:function:anyURI-equal">
			  <AttributeValue DataType="http://www.w3.org/2001/XMLSchema#anyURI">TargetSystemFactoryService</AttributeValue>
			  <ResourceAttributeDesignator DataType="http://www.w3.org/2001/XMLSchema#anyURI" AttributeId="urn:oasis:names:tc:xacml:1.0:resource:resource-id"/>
			</ResourceMatch>
		  </Resource>
		</Resources>
	  </Target>
	  <Condition>
		<Apply FunctionId="urn:oasis:names:tc:xacml:1.0:function:and">
		  <Apply FunctionId="urn:oasis:names:tc:xacml:1.0:function:string-equal">
			<Apply FunctionId="urn:oasis:names:tc:xacml:1.0:function:string-one-and-only">
			  <SubjectAttributeDesignator DataType="http://www.w3.org/2001/XMLSchema#string" AttributeId="role"/>
			</Apply>
			<AttributeValue DataType="http://www.w3.org/2001/XMLSchema#string">user</AttributeValue>
		  </Apply>
		  <Apply FunctionId="urn:oasis:names:tc:xacml:1.0:function:any-of-all">
			<Function FunctionId="urn:oasis:names:tc:xacml:1.0:function:string-equal"/>
			<SubjectAttributeDesignator DataType="http://www.w3.org/2001/XMLSchema#string" AttributeId="urn:SAML:voprofile:group"/>
			<Apply FunctionId="urn:oasis:names:tc:xacml:1.0:function:string-bag">
			  <AttributeValue DataType="http://www.w3.org/2001/XMLSchema#string">/Example-VO</AttributeValue>
			  <AttributeValue DataType="http://www.w3.org/2001/XMLSchema#string">/Math-VO/UUDB/SiteA</AttributeValue>
			</Apply>
		  </Apply>
		</Apply>
	  </Condition>
	</Rule>



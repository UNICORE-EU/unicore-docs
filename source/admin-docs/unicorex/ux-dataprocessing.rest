.. _ux_dataprocessing:

|move-files-img| Data-triggered processing
------------------------------------------

.. |move-files-img| image:: ../../_static/move-files.png
	:height: 32px
	:align: middle

UNICORE can be set up to automatically scan storages and trigger processing
steps (e.g. submit batch jobs or run processing tasks) according to 
user-defined rules.

By default, data-triggered processing is disabled on all storages.

Explicit control is available via the configuration properties 
for storages, as listed in :ref:`ux_storages`. Set the ``enableTrigger`` property 
to ``true`` to enable the data-triggered processing for the given storage.

Since shared storages (HOME, ROOT, etc) are *owned* by the UNICORE server and
used by multiple users, data-triggered processing requires a valid Unix user ID
in order to list files independently of any actual user.
Therefore the ``triggerUserID`` property is used to configure which user ID
should be used (as always in UNICORE, this cannot be *root*, and multiuser
operation requires the TSI!).

For example, you might have a project storage configured like this::

  #
  # Shares
  #
  coreServices.sms.storage.enabledStorages=PROJECTS
  
  coreServices.sms.storage.PROJECTS.name=projects
  coreServices.sms.storage.PROJECTS.description=Shared projects
  coreServices.sms.storage.PROJECTS.path=/opt/shared-data
  coreServices.sms.storage.PROJECTS.defaultUmask=007
  coreServices.sms.storage.PROJECTS.enableTrigger=true
  coreServices.sms.storage.PROJECTS.triggerUserID=projects01


Here the scanning settings are only evaluated top-level.

For each included directory, a separate scan is done, controlled by 
another ``.UNICORE_Rules`` file in that directory. So the directory 
structure could look like this::

  ├── dir1
  │   ├── ...
  │   └── .UNICORE_Rules
  ├── dir2
  │   ├── ...
  │   └── .UNICORE_Rules
  ├── dir3
  │   ├── ...
  │   └── .UNICORE_Rules
  └── .UNICORE_Rules

The top-level ``.UNICORE_Rules`` file must list the included directories.
Processing the included directories is then done using the owner of
that directory.
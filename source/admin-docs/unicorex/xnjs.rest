.. _ux_xnjs:

Interfacing UNICORE/X to the TSI 
--------------------------------

The link from UNICORE/X  to the UNICORE TSI, the component that deals with the actual
job execution and file system access is configured using a properties 
file named ``tsi.config``. It is included from the main config file.

Here's an overview of the most important properties that can be set in this file:

.. csv-table::
  :file: tables/xnjsMainProperties.csv
  :widths: 30, 15, 15, 40
  :header-rows: 1
  :class: tight-table

Most of the other settings in this file are used to configure the
internals and should usually be left at their default
values.

The UNICORE TSI
~~~~~~~~~~~~~~~

This section describes installation and usage of the :ref:`UNICORE TSI <tsi>`.
This is a mandatory step if you want to interface to batch systems
such as Slurm to efficiently use a compute cluster.

.. note::
  Without this component, all jobs will run on the UNICORE/X  server, under the
  user id that started UNICORE/X.

In a nutshell, you have to perform the following steps:

- Install the UNICORE TSI on your cluster front end node(s)

- In the UNICORE TSI configuration, edit the ``tsi.properties`` file

- On the UNICORE/X server, edit ``tsi.config`` and ``simpleidb`` files

- Start the newly installed TSI (as *root* in a multiuser setting)

- Restart UNICORE/X


Installation of the correct TSI
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The :ref:`TSI <tsi>` is a service that is running on the target system.
In case of a cluster system, you'll need to install it on the frontend
machine(s), i.e. the machine from where your jobs are submitted to the
batch system.  There are different variants available for the
different batch systems such as SLURM or Torque.

Usually, installation and start of the TSI will be performed as the
root user.  The TSI will then be able to change to the current UNICORE
user's id for performing work (Note: nothing will ever be executed as
*root*).  You can also use a normal user, but then all commands will
be executed under that user's id.

As the TSI is a crucial and sensitive service, make sure to read
its :ref:`documentation <tsi-manual>`. This guide serves just as a quick overview of
the necessary steps.

- First, download and install the UNICORE TSI package. The `UNICORE
  core server bundle <https://sourceforge.net/projects/unicore/files/Servers/Core/>`_ 
  (*quickstart* package) includes the TSI in the ``tsi`` subdirectory. You should copy 
  this folder to the correct machine first.  In the following this will be denoted by 
  ``<tsidir>``.

- Install the correct TSI variant by 

  .. code:: console

      $ cd <tsidir>
      $ ./Install.sh


  When prompted for the path, choose an appropriate one, denoted ``<your_tsi>`` in the following.

- Check the TSI configuration, especially command locations, path settings, etc.


Required TSI Configuration
^^^^^^^^^^^^^^^^^^^^^^^^^^

Configuration is done by editing :file:`{<tsi_conf_dir>}/tsi.properties`.
At least check the following settings::

  # UNICORE/X machine
  tsi.unicorex_machine=<UNICORE/X host>
  
  # UNICORE/X listener port (check unicorex/conf/tsi.config  variable ``CLASSICTSI.replyport``
  tsi.unicorex_port=7654

  # TSI listener port (check unicorex/conf/xnjs_legacy.xml variable ``CLASSICTSI.port``
  tsi.my_port=4433


UNICORE/X configuration
^^^^^^^^^^^^^^^^^^^^^^^

Edit ``unicorex/conf/main.config`` and check that the ``tsi.config`` file
is included::

  # read TSI-related settings
  $include.TSI conf/tsi.config

Edit ``unicorex/conf/tsi.config``. Check the filespace location,
this is where the local job directories will be created. On a cluster,
these have to be on a shared part of the filesystem. Also, the
filespace location has to be read/write/executable for the current
user. If you wish to avoid a world-executable directory, it is possible
to use a per-user location, like ``$HOME/UNICORE_Jobs``.

Check the ``CLASSICTSI`` related properties. Set the correct value for
the machine and the ports (these can usually be left at their default
values). The ``CLASSICTSI.machine`` property is a comma separated list of
machines names or IP addresses. Optionally, a port number can be added
to each entry, separated from the machine by a colon. UNICORE/X will
establish connections to each of these machines and ports in a
round-robin fashion to ensure that jobs can be submitted and job
statuses retrieved even if one of the TSI instances is
unavailable. Should the port not be given along with the machine,
``CLASSICTSI.port`` will be used as a default.

Here is an small example:
::

  XNJS.filespace=$HOME/UNICORE_Jobs/
  XNJS.idbfile=/opt/unicore/unicorex/conf/simpleidb
  
  CLASSICTSI.machine=login.mycluster.com
  CLASSICTSI.port=4433
  CLASSICTSI.replyport=7654
  CLASSICTSI.priveduser=unicore
  
  XNJS.staging.wget=wget --no-check-certificate


Communication parameters
^^^^^^^^^^^^^^^^^^^^^^^^

Some additional parameters exist for tuning the UNICORE/X-TSI communication.

.. table:: UNICORE/X-TSI communication settings
 :width: 100 
 :widths: 25 15 15 45 
 :class: tight-table

 +---------------------+--------+-------------+-------------------------------------+
 |Property name        |Range of|Default value|Description                          |
 |                     |values  |             |                                     |
 +=====================+========+=============+=====================================+
 |CLASSICTSI.BUFFERSIZE|integer |1000000      |Buffersize for filetransfers in bytes|
 +---------------------+--------+-------------+-------------------------------------+
 |CLASSICTSI.socket.   |integer |300000       |Socket timeout in milliseconds       |
 |timeout              |        |             |                                     |
 +---------------------+--------+-------------+-------------------------------------+
 |CLASSICTSI.socket.   |integer |10000        |Connection timeout in milliseconds   |
 |connect.timeout      |        |             |                                     |
 +---------------------+--------+-------------+-------------------------------------+


Tuning the batch system settings
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

UNICORE uses the normal batch system commands (e.g. qstat) to get the
status of running jobs.  There is a special case if a job is not
listed in the qstat output. UNICORE will then assume the job is
finished. However, in some cases this is not true, and UNICORE will
have a wrong job status.  To work around, there is a special property
::

  # how often UNICORE/X will re-try to get the status of a job
  # in case the job is not listed in the status listing
  CLASSICTSI.statusupdate.grace=2

If the value is larger than zero, UNICORE will re-try to get the job status. 

.. hint::
  When changing TSIs, it's a good idea to remove the UNICORE/X state and any
  files before restarting. See :ref:`ux_persistence` for details.


Enabling SSL for the UNICORE/X to TSI communication
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The UNICORE/X server can be set up to use SSL for communicating with
the UNICORE TSI. On the UNICORE/X side, this is very simple to switch
on. In the tsi.config file, set the following property to ``false`` (by
default it is set to ``true``):
::

  # enable SSL -
  CLASSICTSI.ssl.disable=false

To setup the TSI side, please refer to the :ref:`TSI manual <tsi-manual>`!


Using an SSH tunnel for the UNICORE/X to TSI communication
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

In the special case that the callback port on the UNICORE/X server is not 
accessible from the TSI server, you may want to use an SSH tunnel configuration.
For example, this case occurs if the TSI is running in a different
location (e.g. an Amazon cloud) than the UNICORE/X server.

We recommend using the tool ``autossh``, and adding the tunnel setup to to your
UNICORE/X start script.

Here is an example how to do this:

.. code:: console

  killall -g autossh
  autossh -M 0 -f -o "ExitOnForwardFailure=yes" -o   "ServerAliveInterval 30"
    -o "ServerAliveCountMax 3" -4 -N
    -L 4433:localhost:4433
    -R 7654:localhost:7654
    -i path_to_key remoteuser@remote.server.org


TSI configuration parameter reference
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Here is a full list of TSI-related parameters:

.. csv-table::
  :file: tables/xnjsTSIProperties.csv
  :widths: 25, 15, 20, 40
  :header-rows: 1
  :class: tight-table


Operation without a UNICORE TSI
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In some situations (e.g. in a Windows-only environment) you will not
use the UNICORE TSI, which is designed for multi-user Unix
environments. UNICORE/X can run code in an *embedded* mode on the
UNICORE/X machine. Note that this is without user switching, and
inherently not secure as user code can access potentially sensitive
information, such as configuration data. Also, there is no separation
of users.

Embedded mode is enabled in the tsi.config file  by setting
::

  coreServices.targetsystemfactory.tsiMode=embedded

The embedded mode can be configured with a set of properties which are
listed in the following table:

.. csv-table::
  :file: tables/xnjsLocalTSIProperties.csv
  :widths: 25, 15, 20, 40
  :header-rows: 1
  :class: tight-table

The IDB
-------

.. include:: xnjs-idb.rest

.. include:: xnjs-idb-main.rest

.. include:: xnjs-idb-applications.rest

.. include:: xnjs-tsi-custom.rest

Data staging
------------

When executing user jobs, UNICORE/X also performs data staging, 
i.e. getting data from remote locations before starting the job, and
uploading data when the job has finished. A variety of protocols
can be used for data movement, including UNICORE-specific protocols such 
as BFT or UFTP, but also standard protocols like ftp and scp.

Some of these have additional configuration options, which
are given in this section.

.. include:: scp.rest


GridFTP
~~~~~~~

UNICORE can use GridFTP client tools for stage-in/stage-out provided
the client uploads the required proxy certificate. The proxy cert is
expected in a file ``.proxy`` in the job's working directory.


GridFTP usage can be customised using two settings in ``tsi.config``.
::

  # name / path of the executable
  XNJS.staging.gridftp=/usr/local/bin/globus-url-copy
  
  # additional parameters for globus-url-copy
  XNJS.staging.gridftpParameters=


Configuration reference
~~~~~~~~~~~~~~~~~~~~~~~

The configuration settings related to data staging are summarized in the following 
table:

.. csv-table::
  :file: tables/xnjsStagingProperties.csv
  :widths: 25, 15, 20, 40
  :header-rows: 1
  :class: tight-table

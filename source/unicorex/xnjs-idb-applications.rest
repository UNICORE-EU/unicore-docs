.. _ux_xnjs-idb-applications:

IDB Application definitions
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Apart from describing the available queues and their associated
resources, the most important functionality of the IDB is defining
applications.

Applications can be defined in the main IDB file,

.. code:: 

  {
    Applications: [
      { Name: Date, ...  },
      { Name: "Python script", ... },
    ],
  }

or in separate files (one application per file).

Here is a quick overview of the available elements, which will
be documented in detail below.

.. include:: tables/app_definitions.rest

Here is an example:

.. code:: 

  {
   Name: "Python script",
   Version: "3.4",
   Description: "Python 3 interpreter",
   Executable: "/usr/bin/python3",
   Arguments: [
      "-d$DEBUG?",
      "-vVERBOSE?",
      "$OPTIONS?",
      "$SOURCE?",
      "$ARGUMENTS",
   ],

   Parameters: {
     "SOURCE": {Type: "filename"},
     "ARGUMENTS": {Type: "string"},
     "DEBUG": {Type: "boolean"},
     "VERBOSE": {Type: "boolean"},
     "OPTIONS": {Type: "string"},
   },

   Prologue: "module load python3",
  
   Resources: {
     Nodes: 1,
   }
  }



Basic Application definition
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Here is an example entry for the "Date" application on a UNIX system
::

  {
    Name: Date,
    Version: 1.0,
    Executable: "/bin/date",
  }


Invoking the "Date" application will be simply mapped to an invocation of ``/bin/date``.

Arguments
^^^^^^^^^

Command line arguments are specified using ``Argument`` tags:
:: 

  {
    Name: LS,
    Version: 1.0,
    Executable: /bin/ls
    Arguments: [ "-l", "-t", ],
  }

This would result in a command line ``/bin/ls -l -t``.

Conditional Arguments
^^^^^^^^^^^^^^^^^^^^^

The job submission from a client usually contains environment variables to be
set when running the application. It often happens that a certain argument
should only be included if a corresponding environment variable is set.
This can be achieved by using *"conditional arguments"* in the incarnation
definition. Conditional arguments are indicated by a quastion mark "``?``" 
appended to the argument value:

.. code::

  {
    Name: JAVA,
    Version: "11.0",
    Description: "Java virtual machine",
    Executable: "/usr/bin/java",
  
    Arguments: [ "-cp$CLASSPATH?", ],
  
  }

Here, ``-cp$CLASSPATH?`` is an optional argument. 

If the user's job submission now includes a environment variable named
``CLASSPATH`` the incarnated commandline will be
``/usr/bin/java -cp$CLASSPATH ...``, otherwise just ``/usr/bin/java ...``.

This allows very flexible incarnations.

Environment variables
^^^^^^^^^^^^^^^^^^^^^

To set environment variables, add a map 

.. code::

  {
    Name: LS,
    Version: 1.0,
    Executable: "/bin/ls",
  
    Environment: {
     "PATH": "/opt/myapp:/usr/bin:$PATH",
     "MYENV": "value",
    },
  
  }


Pre and post-commands
^^^^^^^^^^^^^^^^^^^^^

Sometimes it is useful to be able to execute one or several commands
before or after the execution of an application, for example, to
perform some pre- or postprocessing. These pre/post commands are executed
on a login node (i.e. they are not part of the batch job).

.. code::

  {
     Name: SomeSimulation,
     Version: "1.0",
     Executable: "/usr/bin/simulation",
     
     PreCommand: "/opt/licenses/aquire_license",
     
     PostCommand: "/opt/licenses/release_license"
  }


Prologue and epilogue
^^^^^^^^^^^^^^^^^^^^^

These commands will be executed as part on a batch node of the user's job script,
and are placed before / after the application executable command.

.. code::

  {
     Name: SomeSimulation,
     Version: "1.0",
     Executable: "/usr/bin/simulation",   
     Prologue: "module load some_module",
     Epilogie: "",
  }

Interactive execution when using a batch system
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

If an application should not be submitted to the batch system, but be run on 
the login node (i.e. interactively), a flag in the IDB can be set:

.. code::

  {
    Name: SomeApp,
    Version: 1.0,
    
    # instruct UNICORE to run the application on a login node
    RunOnLoginNode: true,
    
  }


Exit code handing
^^^^^^^^^^^^^^^^^

By default, a UNICORE job will be set to NOT_SUCCESSFUL if the application exits
with a non-zero exit code.
If you want to change this behaviour, you can set a flog

.. code:: xml

  {
    Name: SomeApp,
    Version: 1.0,
      
  # instruct UNICORE to NOT fail if the application
  # exits with non-zero exit code
  
    IgnoreNonZeroExitCode: true,
  
  }

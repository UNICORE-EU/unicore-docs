.. _ucc_admin:

|admin-img| UCC for site administrators
---------------------------------------

.. |admin-img| image:: ../../_static/admin.png
	:height: 32px
	:align: middle

UCC can be used for administrative and user support tasks, like
checking server status, or getting the full details of a user job.


Security considerations
~~~~~~~~~~~~~~~~~~~~~~~

Usually, each UNICORE user has only access to his or her own resources 
(such as jobs). For administrative use, you will need to aquire administrator
privileges. The recommended way is to create dedicated user credentials
(e.g. username/password) and map them to the role *admin* (in the :ref:`XUUDB <xuudb>`,
or whatever attribute source you are using).

Admin commands
~~~~~~~~~~~~~~

UCC has dedicated commands for accessing the *AdminService* of a UNICORE/X container.
To get started, try:

.. code:: console

  $ ucc admin-info -l


UCC will try to access the admin service on each availabe UNICORE/X server. For each server,
a list of statistical and performance data will be listed.

It will also list the available admin commands for each server, with a
short description of their parameters. For example, here is a sample output::

  https://localhost:8080/DEMO-SITE/rest/admin 
    Metrics: 
      use.security.ServerIdentity: ServerIdentity: CN=UNICOREX,O=UNICORE,C=EU;Expires: Sat Jun 24 10:42:02 CEST 2051;IssuedBy: CN=Demo CA,O=UNICORE,C=EU
      use.throughput: count=29,mean=0.00,m1_rate=0.00,m5_rate=0.01,m15_rate=0.01
      MeanTimeQueued-1: n/a
    Commands: 
      ToggleResourceAvailability : parameters: resources (comma separated list of IDs)
      ToggleJobSubmission : parameters: [message]
      AbortJob : parameters: jobID, [cleanup:false/true], [xnjsReference]
      ShowJobDetails : parameters: [jobID], [xnjsReference]
      ListPartitions : parameters: [xnjsReference]
      ShowServerUsageOverview : parameters: [clientDN]

To invoke a command, the ``admin-runcommand`` is used. It can take
optional parameters. For example:

.. code:: console

  $ ucc admin-runcommand ShowJobDetails jobID=4VGUfmFYdSR



Disabling/enabling job submission
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

For example, it is possible to disable/enable job
submission to the server, using the ``ToggleJobSubmission`` command,
which can take an optional message:

.. code:: console

  $ ucc admin-runcommand ToggleJobSubmission message="Maintenance"


The service will reply::

  $> SUCCESS, service reply: OK - job submission is disabled

If a user now tries to submit, she will receive an error message on submission.
Running the command again will re-enable the service:

.. code:: console

 $ ucc admin-runcommand ToggleJobSubmission message="Maintenance"
 $> SUCCESS, service reply: OK - job submission is now enabled


Getting job details
^^^^^^^^^^^^^^^^^^^

To get the full job details (for example in user support), try:

.. code:: console

  $ ucc admin-runcommand ShowJobDetails jobID=<unique_jobid>

For example,
::

  $ ucc admin-runcommand ShowJobDetails jobID=7IAPQXlNue0

  SUCCESS, service reply: Job information for 7IAPQXlNue0
    {Info=Action ID       : 7IAPQXlNue0
    Action type     : JSON
    Status          : DONE 
    Result          : SUCCESSFUL [Success.]
    Owner           : CN=Demo User, O=UNICORE, C=EU
    Job definition: {"ApplicationName":"Date","DetailedStatusDisplay":"true","KeepFinishedJob":"true","Output":"/tmp","Imports":[],"haveClientStageIn":"false","Exports":[]}
    Processing context: {_TIME_END_STAGEIN=1723641157070, eu.unicore.xnjs.ems.ApplicationExecutionStatus=DONE, _TIME_END=1723641164106, USAGE.logged=true, _TIME_START=1723641156661, _TIME_START_STAGEOUT=1723641164106, _TIME_SUBMITTED=1723641157289, _TIME_END_MAIN=1723641164054, EMS_AUTOSUBMIT=true}
    Application Info: Application <Date:1.0>
    Job log: 
    Wed Aug 14 15:12:36 CEST 2024: Created with type 'JSON'
    Wed Aug 14 15:12:36 CEST 2024: Client: Name: CN=Demo User,O=UNICORE,C=EU
    Xlogin: uid: [schuller:demouser, active=schuller], gids: [schuller, active=schuller, addingOSgroups: true]
    Role: user: role from attribute source
    Security tokens: User: CN=Demo User,O=UNICORE,C=EU
    Client's original IP: 127.0.0.1
    Wed Aug 14 15:12:37 CEST 2024: Created job directory </home/schuller/UNICORE-Jobs/7IAPQXlNue0/>
    Wed Aug 14 15:12:37 CEST 2024: Status set to READY.
    Wed Aug 14 15:12:37 CEST 2024: Status set to PENDING.
    Wed Aug 14 15:12:37 CEST 2024: Requesting resources: [Queue=batch, Nodes=1, Runtime=3600]
    Wed Aug 14 15:12:37 CEST 2024: Command is: #!/bin/bash -l
    ...
    Wed Aug 14 15:12:37 CEST 2024: TSI reply: submission OK.
    Wed Aug 14 15:12:37 CEST 2024: Submitted to TSI as [schuller schuller:DEFAULT_GID] with BSSID=187312841157244
    Wed Aug 14 15:12:43 CEST 2024: Exit code 0
    Wed Aug 14 15:12:43 CEST 2024: Job completed on BSS.
    Wed Aug 14 15:12:44 CEST 2024: End of processing - successful.
    Wed Aug 14 15:12:44 CEST 2024: Total: 7 sec., Stage-in: 0 sec., Stage-out: 0 sec.}


Thus you can get a full view of what the user submitted and what was executed.

Listing jobs, sites, ...
~~~~~~~~~~~~~~~~~~~~~~~~

You can also use all normal UCC commands to access the server. Note
however that due to the authentication and authorisation system in
UNICORE, this may not always work as expected: the *admin* user might
not have the required Unix permissions to access files, list
directories, etc.

The UCC commands that list server-side things (:ref:`list-jobs <list-jobs>`, etc.) accept 
a filtering option, that can be used to limit the results of the operation.
Filtering works on the XML resource properties of the resource in question.

Filtering is enabled by the ``-f`` or ``--filter`` option of the form:
::

  -f NAME OPERATOR VALUE
  
where *NAME* is the name of an element from the JSON resource properties.

For example, to list all jobs:

.. code:: console

  $ ucc list-jobs -f status equals RUNNING

To list all jobs submitted on Nov 13, 2007:

.. code:: console

  $ ucc list-jobs -f submissionTime contains 2007-11-13


.. table:: Filtering options
   :widths: 40,60
   :class: tight-table

   +--------------------------------+-----------------------------------+
   | Operator (long and short form) | Description                       |
   +================================+===================================+
   | equals, eq                     | String equality (ignoring case)   |
   +--------------------------------+-----------------------------------+
   | notequals, neq                 | String inequality (ignoring case) |
   +--------------------------------+-----------------------------------+
   | contains, c                    | Substring match                   |
   +--------------------------------+-----------------------------------+
   | notcontains, nc                | substring non-match               |
   +--------------------------------+-----------------------------------+
   | greaterthan, gt                | Lexical comparison                |
   +--------------------------------+-----------------------------------+
   | lessthan, lt                   | Lexical comparison                |
   +--------------------------------+-----------------------------------+


.. _rest-command:

Low-level operations
~~~~~~~~~~~~~~~~~~~~

UCC supports low-level access to REST API endpoints using the ``rest``
command, specifically you can execute HTTP GET, PUT, POST and DELETE
requests with JSON content.

For example, to delete (destroy) a resource:
  
.. code:: console

  $ ucc rest delete <Address>
  
To get a complete property listing (i.e. print the JSON resource property document):
  
.. code:: console

  $ ucc rest get <Address>

To change properties, use the ``put`` command with JSON content:
   
.. code:: console

  $ ucc rest put '{"Tags": ["tests", "hpc" ]}'

These commands can be abbreviated, e.g. ``ucc rest d <Address>``


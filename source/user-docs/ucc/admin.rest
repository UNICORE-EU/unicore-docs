.. _ucc_admin:

|admin-img| UCC for site administrators
---------------------------------------

.. |admin-img| image:: ../../_static/admin.png
	:height: 32px
	:align: middle

UCC can be used for administrative and user support tasks, like
checking server status, or getting the full details of a user job.


Security considerations
~~~~~~~~~~~~~~~~~~~~~~~
 
Usually, each UNICORE user has only access to his or her own resources 
(such as jobs). For administrative use, you will need to aquire administrator
privileges. There are two ways to achieve this: 

- create dedicated user credentials (e.g. a certificate) and map
  them to the role *admin* (in the :ref:`XUUDB <xuudb>`, or whatever attribute source
  you are using). This method is recommended if you want to remotely
  administrate :ref:`UNICORE/X <unicorex>`.

- use the server keystore (of the UNICORE/X server you want to administrate) 
  as UCC keystore. This will also give you administrator privileges. For this you 
  will need to be logged on to the UNICORE/X server, and UNICORE/X must accept
  certificate authentication.

Admin commands
~~~~~~~~~~~~~~

UCC has dedicated commands for accessing the *AdminService* of a UNICORE/X container.
To get started, try:

.. code:: console

  $ ucc admin-info -l


UCC will try to access the admin service on each availabe UNICORE/X server. For each server,
a list of statistical and performance data will be listed.

It will also list the available admin commands for each server, with a
short description of their parameters. For example, here is a sample output::

  https://localhost:8080/DEMO-SITE/services/AdminService?res=default_admin 
    Services: 
      TargetSystemFactoryService[1]
      ...
    Monitors: 
      use.externalConnectionStatus.REST_UnitySAMLAuthenticator: OK
      use.security.overview: ServerIdentity: CN=Demo UNICORE/X,O=UNICORE,C=EU;Expires: Thu Sep 09 12:01:19 CEST 2032;IssuedBy: CN=Demo CA,O=UNICORE,C=EU
      ....
    Metrics: 
      use.externalConnectionStatus.REST_UnitySAMLAuthenticator: OK
      use.rest.callFrequency: 0.016677196376660174
      ...
    Available commands:
      ShowJobDetails : parameters: jobID, [xnjsReference]
      ShowServerUsageOverview : parameters: [clientDN]
      ToggleResourceAvailability : 'resources' - comma separated list of IDs
      ToggleJobSubmission : parameters: [message]
      ToggleBESJobSubmission : 

To invoke a command, the ``admin-runcommand`` is used. It can take
optional parameters.


Disabling/enabling job submission
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

For example, it is possible to disable/enable job
submission to the server, using the ``ToggleJobSubmission`` command,
which can take an optional message:

.. code:: console

  $ ucc admin-runcommand ToggleJobSubmission message="Maintenance"


The service will reply::

  $> SUCCESS, service reply: OK - job submission is disabled

If a user now tries to submit, she will receive an error message on submission.
Running the command again will re-enable the service:

.. code:: console

 $ ucc admin-runcommand ToggleJobSubmission message="Maintenance"
 $> SUCCESS, service reply: OK - job submission is now enabled


Getting job details
^^^^^^^^^^^^^^^^^^^

To get the full job details (for example in user support), try:

.. code:: console

  $ ucc admin-runcommand ShowJobDetails jobID=<unique_jobid>

For example,
::

  ucc admin-runcommand ShowJobDetails jobID=461f78c7-82a6-4887-9c33-6f538a4b0cb2
  SUCCESS, service reply: Job information for 461f78c7-82a6-4887-9c33-6f538a4b0cb2
  {Info=Action ID       : 461f78c7-82a6-4887-9c33-6f538a4b0cb2
  Action type     : JSON
  Status          : DONE (trans.: none)
  Result          : SUCCESSFUL [Success.]
  Owner           : CN=Demo User, O=UNICORE, C=EU
  Job Definition: {"Job type":"interactive","DetailedStatusDisplay":"true","KeepFinishedJob":"true","Output":"/tmp","IDLocation":"/tmp","Executable":"date","haveClientStageIn":"false","Tags":["testing"]}
  Processing context: de.fzj.unicore.xnjs.ems.ProcessingContext@17f4b0b6
  Application Info: Application <unnamed>
  Job log: 
  Thu Feb 25 16:25:07 CET 2021: Created with ID 461f78c7-82a6-4887-9c33-6f538a4b0cb2
  Thu Feb 25 16:25:07 CET 2021: Created with type 'JSON'
  Thu Feb 25 16:25:07 CET 2021: Client: Name: CN=Demo User,O=UNICORE,C=EU
  Xlogin: uid: [schuller], gids: [schuller:audio, active=schuller, addingOSgroups: true]
  Role: user: role from attribute source
  Security tokens: User name: CN=Demo User,O=UNICORE,C=EU
  Delegation to consignor status: true, core delegation status: false
  Message signature status: UNCHECKED
  Client's original IP: 127.0.0.1
  Thu Feb 25 16:25:07 CET 2021: No staging in needed.
  Thu Feb 25 16:25:07 CET 2021: Status set to READY.
  Thu Feb 25 16:25:07 CET 2021: Status set to PENDING.
  Thu Feb 25 16:25:08 CET 2021: Execution on login node
  Thu Feb 25 16:25:08 CET 2021: Command is:
  Thu Feb 25 16:25:08 CET 2021: #!/bin/bash -l 
  export PROJECTS_DIR=/opt/shared-data
  #TSI_EXECUTESCRIPT
   
  #RESOURCES 
  #TSI_DISCARD_OUTPUT true
  #TSI_SCRIPT
  #TSI_UMASK 77
  umask 77
  cd /opt/shared-data/UNICORE-Jobs//461f78c7-82a6-4887-9c33-6f538a4b0cb2/
   { date > /opt/shared-data/UNICORE-Jobs//461f78c7-82a6-4887-9c33-6f538a4b0cb2/stdout 2> /opt/shared-data/UNICORE-Jobs//461f78c7-82a6-4887-9c33-6f538a4b0cb2/stderr; echo $? > /opt/shared-data/UNICORE-Jobs//461f78c7-82a6-4887-9c33-6f538a4b0cb2//UNICORE_SCRIPT_EXIT_CODE ; } & echo $! > /opt/shared-data/UNICORE-Jobs//461f78c7-82a6-4887-9c33-6f538a4b0cb2//UNICORE_SCRIPT_PID 
  Thu Feb 25 16:25:08 CET 2021: TSI reply: submission OK.
  Thu Feb 25 16:25:11 CET 2021: Submitted to classic TSI as [schuller schuller:DEFAULT_GID] with PID=30112 on [localhost]
  Thu Feb 25 16:25:11 CET 2021: Exit code 0
  Thu Feb 25 16:25:11 CET 2021: Job completed on BSS.
  Thu Feb 25 16:25:11 CET 2021: Status set to DONE.
  Thu Feb 25 16:25:11 CET 2021: Result: Success.
  Thu Feb 25 16:25:11 CET 2021: Total: 3 sec., Stage-in: 0 sec., Queued: 0 sec., Main: 0 sec., Stage-out: 0 sec.}

Thus you can get a full view of what the user submitted and what was executed.

Listing jobs, sites, ...
~~~~~~~~~~~~~~~~~~~~~~~~

You can also use all normal UCC commands to access the server. Note
however that due to the authentication and authorisation system in
UNICORE, this may not always work as expected: the *admin* user might
not have the required Unix permissions to access files, list
directories, etc.

The UCC commands that list server-side things (:ref:`list-jobs <list-jobs>`, etc.) accept 
a filtering option, that can be used to limit the results of the operation.
Filtering works on the XML resource properties of the resource in question.

Filtering is enabled by the ``-f`` or ``--filter`` option of the form:
::

  -f NAME OPERATOR VALUE
  
where *NAME* is the name of an element from the JSON resource properties.

For example, to list all jobs:

.. code:: console

  $ ucc list-jobs -f status equals RUNNING

To list all jobs submitted on Nov 13, 2007:

.. code:: console

  $ ucc list-jobs -f submissionTime contains 2007-11-13


.. table:: Filtering options
   :widths: 40,60
   :class: tight-table

   +--------------------------------+-----------------------------------+
   | Operator (long and short form) | Description                       |
   +================================+===================================+
   | equals, eq                     | String equality (ignoring case)   |
   +--------------------------------+-----------------------------------+
   | notequals, neq                 | String inequality (ignoring case) |
   +--------------------------------+-----------------------------------+
   | contains, c                    | Substring match                   |
   +--------------------------------+-----------------------------------+
   | notcontains, nc                | substring non-match               |
   +--------------------------------+-----------------------------------+
   | greaterthan, gt                | Lexical comparison                |
   +--------------------------------+-----------------------------------+
   | lessthan, lt                   | Lexical comparison                |
   +--------------------------------+-----------------------------------+


.. _rest-command:

Low-level operations
~~~~~~~~~~~~~~~~~~~~

UCC supports low-level access to REST API endpoints using the ``rest``
command, specifically you can execute HTTP GET, PUT, POST and DELETE
requests with JSON content.

For example, to delete (destroy) a resource:
  
.. code:: console

  $ ucc rest delete <Address>
  
To get a complete property listing (i.e. print the JSON resource property document):
  
.. code:: console

  $ ucc rest get <Address>

To change properties, use the ``put`` command with JSON content:
   
.. code:: console

  $ ucc rest put '{"Tags": ["tests", "hpc" ]}'

These commands can be abbreviated, e.g. ``ucc rest d <Address>``


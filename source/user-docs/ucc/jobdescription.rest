.. _ucc_jobdescription:

Job description format
----------------------

UNICORE uses a JSON format that allows you to specify the application or executable you
want to run, arguments and environment settings, any files to stage in from remote servers or the
local machine and any result files to stage out.

Several complete job samples can be found in the ``samples`` directory of the distribution.
On Linux, check also the ``/usr/share/unicore/ucc/samples`` directory.

Comments are (inofficially!) possible using the ``#`` hash character, as in Unix shell scrips.

.. note::
 Quotes "" are needed around the keys and values in case special characters (like ':' or '/'")
 appear, if in doubt use quotes!


To view an example job showing most of the available options, run
  
.. code:: console

  $ ucc run -H


(most of the options shown are not mandatory, of course)

Usually, a UNICORE job file describe a single batch job on the target
system. However there is a feature called "parameter sweep"
which leads to the creation of multiple batch jobs from a single
"template" job. UCC can also create these "sweep jobs", as described
in the relevant parts of the job description. Note that a "sweep job"
still is treated as a single job by UNICORE. Sweep jobs are very
useful if you need to run jobs that are highly similar, and only
differ by a parameter setting or even by a different input file.

Overview
~~~~~~~~

UNICORE's job description consists of multiple parts

* an ``Imports`` section listing data to be staged in to the job's
  working directory from remote storage locations or the client's file system
* pre-processing
* a section describing the main executable
* post-processing
* an ``Exports`` section listing result files to be staged out to
  remote storage locations
* a ``Resources`` section stating any resource requirements like
  job runtime or number of nodes
* a number of additional elements for setting the job name, or
  defining tags for the job

Here is a table listing the supported elements, these will be
described in more detail below.

.. table:: UNICORE JSON job description
   :class: tight-table
  
   +--------------------------------------+-----------------+--------------------------------------------------------+
   | Tag                                  | Type            | Description                                            |
   +======================================+=================+========================================================+ 
   | ApplicationName                      | String          | Application name                                       |
   +--------------------------------------+-----------------+--------------------------------------------------------+
   | ApplicationVersion                   | String          | Application version                                    |
   +--------------------------------------+-----------------+--------------------------------------------------------+ 
   | Executable                           | String          | Command line                                           |
   +--------------------------------------+-----------------+--------------------------------------------------------+
   | Arguments                            | List of strings | Command line arguments                                 |
   +--------------------------------------+-----------------+--------------------------------------------------------+ 
   | Environment                          | Map of strings  | Environment values                                     |
   +--------------------------------------+-----------------+--------------------------------------------------------+
   | Parameters                           | Map             | Application parameters                                 |
   +--------------------------------------+-----------------+--------------------------------------------------------+
   | IgnoreNonZeroExitCode                | "true" \/       | Don't fail the job if app exits with non-zero          |
   |                                      | "false"         | exit code (default: false)                             |
   +--------------------------------------+-----------------+--------------------------------------------------------+
   | User precommand                      | String          | Pre-processing                                         |
   +--------------------------------------+-----------------+--------------------------------------------------------+
   | RunUserPrecommandOnLoginNode         | "true" \/       | Pre-processing is done on login node                   |
   |                                      | "false"         | (default: true)                                        |
   +--------------------------------------+-----------------+--------------------------------------------------------+
   | UserPrecommandIgnoreNonZeroExitCode  | "true" \/       | Don't fail job if pre-command fails (default: false)   |
   |                                      | "false"         |                                                        |
   +--------------------------------------+-----------------+--------------------------------------------------------+
   | User postcommand                     | String          | Post-processing                                        |
   +--------------------------------------+-----------------+--------------------------------------------------------+
   | RunUserPostcommandOnLoginNode        | "true" \/       | Post-processing is done on login node (default: true)  |
   |                                      | "false"         |                                                        |
   +--------------------------------------+-----------------+--------------------------------------------------------+
   | UserPostcommandIgnoreNonZeroExitCode | "true" \/       | Don't fail job if post-command fails (default: false)  |
   |                                      | "false"         |                                                        |
   +--------------------------------------+-----------------+--------------------------------------------------------+
   | Umask                                | Octal string    | Umask value  (defaults to ``0077``)                    |
   +--------------------------------------+-----------------+--------------------------------------------------------+
   | Resources                            | Map             | The job's resource requests                            |
   +--------------------------------------+-----------------+--------------------------------------------------------+
   | Project                              | String          | Accounting project                                     |
   +--------------------------------------+-----------------+--------------------------------------------------------+ 
   | Imports                              | List of imports | Stage-in \/ data import                                |
   +--------------------------------------+-----------------+--------------------------------------------------------+
   | Exports                              | List of exports | Stage-out \/ data export                               |
   +--------------------------------------+-----------------+--------------------------------------------------------+
   | Job type                             | ``normal``,     | Whether to run the job via the batch system (``normal``|
   |                                      | ``interactive``,| , default) or on a login node (``interactive``), or by |
   |                                      | ``raw``         | using a given file containing batch system directives  |
   |                                      |                 | (``raw``)                                              |
   +--------------------------------------+-----------------+--------------------------------------------------------+
   | Login node                           | String          | For ``interactive`` jobs, select a login node (by name,|
   |                                      |                 | as configured server side. Wildcards ``*`` and ``?``   |  
   |                                      |                 | can be used)                                           |
   +--------------------------------------+-----------------+--------------------------------------------------------+
   | BSS file                             | String          | For ``raw`` jobs, the absolute or relative path to a   | 
   |                                      |                 | file containing batch system directives                |
   +--------------------------------------+-----------------+--------------------------------------------------------+
   | Tags                                 | List of strings | Job tags                                               |
   +--------------------------------------+-----------------+--------------------------------------------------------+
   | Notification                         | String          | URL to send job status change notifications to (via    |
   |                                      |                 | HTTP POST)                                             |
   +--------------------------------------+-----------------+--------------------------------------------------------+
   | User email                           | String          | User email to send notifications to (if the batch      | 
   |                                      |                 | system supports it)                                    |
   +--------------------------------------+-----------------+--------------------------------------------------------+
   | Site                                 | String          | UNICORE site name to run the job at (only applicatible |
   |                                      |                 | if using a broker!)                                    |
   +--------------------------------------+-----------------+--------------------------------------------------------+
   | Name                                 | String          | Job name                                               |
   +--------------------------------------+-----------------+--------------------------------------------------------+ 


Specifying the executable or application
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can specify a UNICORE application by name and (optional) version, or using a (machine dependent) path
to an executable file.
::

  {
     "ApplicationName": "Date",
     "ApplicationVersion": "1.0",  
  }


Note the comma-separation and the curly braces. To directly call an executable,
::  

  {
     "Executable": "/bin/date",  
  }


Generally, jobs will be submitted to the batch scheduler on the remote
system.  If you want to run on a login node instead, set the ``Job
type`` to ``interactiv``" (instead of the default ``normal``):
::
  
  {
     "Job type": "interactive",  
  }


Arguments and Environment settings
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Arguments and environment settings are specified using a list of
String values. Here is an example.
::

  {

     "Executable": "/bin/ls",
     
     "Arguments": ["-l", "-t"],
     
     "Environment": [ "PATH=/bin:$PATH", "FOO=bar" ] ,
     
  }


Argument sweeps
~~~~~~~~~~~~~~~

To create a sweep over an Argument setting by replacing the value 
by a sweep specification. This can be either a simple list::

  "Arguments": [
   { "Values": ["-o 1", "-o 2", "-o 3"] },
  ],  


or a range::

  "Arguments": {
   "-o", { "From": "1", "To": "3", "Step" : "1" },
  },  

where the ``From``, ``To`` and ``Step`` parameters are floating point or integer
numbers.


Application parameters
~~~~~~~~~~~~~~~~~~~~~~

In UNICORE, parameters for applications are often transferred in the
form of environment variables.  For example, the POVRay application
has a large set of parameters to specify image width, height and many
more.  In UCC, you can specify these parameters in a very simple way
using the ``Parameters`` keyword::

  {
    "ApplicationName": "POVRay",
  
    "Parameters": {
     "WIDTH": "640",
     "HEIGHT": "480",
     "DEBUG": "",
    },  
  
  }

Note that an "empty" parameter (which does not have a value) needs to
be written with an explicit empty string due to the limitations of the
JSON syntax.

Parameter sweeps
^^^^^^^^^^^^^^^^

You can sweep over application parameters by replacing the parameter value
by a sweep specification. The replacement can be either a simple list::

  "Parameters": {
   "WIDTH": { "Values": ["240", "480", "960"] },
  },  

or a range::

  "Parameters": {
   "WIDTH": { "From": "240", "To": "960", "Step": "240" },
  },  


where the ``From``, ``To`` and ``Step`` parameters are floating point or integer numbers.


Job data management
~~~~~~~~~~~~~~~~~~~

In general your job will require data files, either from your client
machine, or from some remote location.  An important concept in
UNICORE is the job's workspace, which is the default location into
which files are placed. The same applies to result files: by default,
files will be downloaded from the job's workspace.

However, other remote storage locations are supported, too.  Read more
on remote locations in `ucc_datamanagement`_.

Local files can be given as an absolute or relative path; in the
latter case the configured output directory will be used as base
directory.

Importing files into the job workspace
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

To import files from your local computer or from remote sites to the
job's working directory on the remote UNICORE server, there's the
"Imports" keyword. Here is an example Imports section which
demonstrates some of the possibilities.
::

  {
  
  "Imports": [ 
  
  #
  # import a local file from the client machine
  # into the job workspace
  #
   { "From": "/work/data/fileName", "To": "fileName" },
  
  #    
  # import a set of local files from the client machine
  # into the job workspace
  #
   { "From": "/work/data/pdf/*.pdf", "To": "/" },
  
  #
  # import a remote file from a UNICORE storage using the UFTP protocol
  #
   { "From": "UFTP:https://gw:8080/DEMO-SITE/rest/core/storages/Home/files/testfile",
     "To": "testfile" },
  
  # create a symlink from a file on the compute machine to the job workspace
   { "From": "link:/work/data/testfile", "To": "linked-file" },
  
  # copy a file on the compute machine to the job workspace
   { "From": "file:/work/data/testfile", "To": "copied-file" },
  
  ],

  }


If for some reason an import fails, but you want the job to run anyway,
there is a flag "FailOnError" that can be set to "false" ::

 "Imports": [ 

  #
  # do not fail on errors for this import:
  #
   { "From": "/work/data/fileName",
     "To": "fileName",
     "FailOnError": "false",
   },
  
 ],

.. note::
  UCC supports simple wild cards ("*" and "?") for importing and exporting files


Supported protocols for imports
+++++++++++++++++++++++++++++++

  * ``file://`` : copy file(s) from the remote machine into the job dir

  * ``link://`` : symlink file/dir from the remote machine into the job dir

  * Read more on remote locations in `ucc_datamanagement`_.

Using "inline" data to import a file into the job workspace
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

For short import files, it can be convenient to place the data directly into the job descrition,
which can speed up and simplify the job submission process.

Here is an example::

   "Imports": [ 
    { "From": "inline://dummy",
      "To": "uspaceFileName",
      "Data": "this is some test data", },
   ]


The "From" URL has to start with "inline://"

Sweeping over a stage-in file
+++++++++++++++++++++++++++++

You can also sweep over files, i.e. create multiple batch jobs that differ by one imported
file. To achieve this, replace the ``From`` parameter by list of values, for example::

   "Imports": [ 
  
    { "From": [
              "https://gw:8080/DEMO-SITE/rest/core/storages/Home/files/work/data/file1", 
              "https://gw:8080/DEMO-SITE/rest/core/storages/Home/files/work/data/file2", 
              "https://gw:8080/DEMO-SITE/rest/core/storages/Home/files/work/data/file3", 
            ],
      "To": "fileName",  },


**Note** that only a single stage-in can be sweeped over in this way, and that this will not work
with files imported from your local client machine.


Exporting result files from the job workspace
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

To export files from the job's working directory to your local machine or to some remote
storage, use the ``Exports`` keyword. Here is an example Exports section that specifies two exports::

  {
    "Exports": [ 
      # this exports all png files to a local directory
      { "From": "*.png", "To": "/home/me/images/" },
  
      # this exports a single file to a to local directory
      # failure of this data transfer will be ignored
      { "From": "error.log", "To": "/home/me/logs/error.log", "FailOnError": "false", },
      
      # this exports to a UNICORE storage
      { "From": "stdout", "
         To": "https://gw:8080/DEMO-SITE/rest/core/storages/Home/files/results/myjob/stdout"
      },
    ]
  }

As a special case, UCC also supports downloading files from other UNICORE storages
(after the job has finished), using the Exports keyword::

  {
     "Exports": [ 
      # this exports a file from a UNICORE storage
      { "From": "https://gw:8080/DEMO-SITE/rest/core/storages/Work/somefile",
        "To": "/home/me/somefile"
      },
    ]   
  }


The protocol to be used for imports and exports can be chosen using the ``Preferred Protocols`` 
entry, containing a space-separated list of protocols::

  {
     "Preferred protocols": "UFTP BFT",
  }

  
If not specified or not available at the remote site, ``BFT`` will be used.


Specifying credentials for data staging
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Some data staging protocols supported by UNICORE require credentials such as username and password.
To pass username and password to the server, the syntax is as follows
::

  {
     "Imports": [ 
       { "From": "ftp://someserver:25/some/file", "To": "input_data",
         "Credentials": { "Username": "myname", "Password": "mypassword" },
       },
     ]   
  }

and similarly for exports.

You can use an OAuth Bearer token to authenticate HTTP data transfers::

  {
     "Imports": [
       { "From": "https://someserver/some/file", "To": "input_data",
         "Credentials": { "BearerToken": "some_token" },
       },
     ]
  }

You can leave the token value empty, ``"BearerToken": ""``, if the server
already has your token by some other means.

Redirecting standard input
^^^^^^^^^^^^^^^^^^^^^^^^^^

If you want to have your application or executable read its standard input from a file, you 
can use the following
::

  "Stdin": "filename",

then the standard input will come from the file named "filename" in the job working directory. 



Resources
~~~~~~~~~

A job definition can have a Resources section specifying the resources to request
on the remote system. For example
::
  
  "Resources": {
  
    "Runtime": "12h",
   
    "Nodes": "8",
  
    "Queue" : "fast",
  }


UNICORE has the following built-in resource names.


.. table:: UNICORE built-in resources
   :width: 100%
   :widths: 30,70
   :class: tight-table

   +-----------------+------------------------------------------------------+
   | Resource name   | Description                                          |
   +=================+======================================================+
   | Runtime         | Job runtime (wall time) (in seconds, append "min",   |
   |                 | "h", or "d" for other units)                         |
   +-----------------+------------------------------------------------------+
   | Queue           | Batch system queue / partition to use                |
   +-----------------+------------------------------------------------------+
   | Nodes           | Number of nodes                                      |
   +-----------------+------------------------------------------------------+
   | CPUs            | Total number of CPUs                                 |
   +-----------------+------------------------------------------------------+
   | CPUsPerNode     | Number of CPUs per node                              |
   +-----------------+------------------------------------------------------+
   | Memory          | Memory per node                                      |
   +-----------------+------------------------------------------------------+
   | Reservation     | Batch system reservation ID                          |
   +-----------------+------------------------------------------------------+
   | NodeConstraints | Batch system node constraints                        |
   +-----------------+------------------------------------------------------+

In addition, sites may define custom resources, which you can use, too.


Miscellaneous options
~~~~~~~~~~~~~~~~~~~~~

Site name
^^^^^^^^^

To specify on which site (if available) the job should be run (e.g. for UCC's batch mode)
::

  "Site": "DEMO-SITE",

If you do not specifiy anything UCC will select a site that will match
your requirements (at least those that UCC checks for). You can also
set the site during job submission as an option to "ucc run ...".

Specifying a project
^^^^^^^^^^^^^^^^^^^^
If the system you're submitting to requires a project name for
accounting purposes, you can specify the account (or project) you want
to charge the job to using the ``Project`` tag::

  "Project" : "my_project",


Umask
^^^^^

By default, UNICORE sets a umask of ``0077``. If you want to change this, add
it to the job description, for example
::

  "Umask" : "0022",

This setting will influence the job directory permissions, as well as all subsequent
scripts and the batch job submission.


Job tags
^^^^^^^^

To set job tags that help you find / filter jobs later, use the ``Tags`` keyword
::

  "Tags": [ "production", "train1", "my_tag" ],



Specifying a URL for receiving notifications
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The UNICORE/X server can send out notifications when the job enters
the RUNNING and/or DONE state.

To enable this, add the URL of the receiving service to your job::

  "Notification" : "https://your-service-url",

UNICORE will send an authenticated HTTPS POST message to this URL,
with JSON content.
::

  "href" : "https://unicore-url/rest/core/jobs/job-uuid",
  "status" : "RUNNING",
  "statusMessage" : ""

The ``status`` field will be RUNNING when the user application starts
executing, and ``SUCCESSFUL`` / ``FAILED`` when the job has finished.
::

  "href" : "https://unicore-url/rest/core/jobs/job-uuid",
  "status" : "SUCCESSFUL",
  "statusMessage" : "",
  "exitCode" : 0

Do not expect "realtime" behaviour here, as UNICORE has a certain
delay (typically 30 to 60 seconds, depending on the server
configuration) until "noticing" job status changes on the batch
system.


Specifying the user email for batch system notifications
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Some batch systems support sending email upon completion of jobs. To specify
your email, use
::

  "User email" : "foo@bar.org" ,



Specifying the job name
^^^^^^^^^^^^^^^^^^^^^^^

The job name can be set simply by
::

  "Name": "Test job",


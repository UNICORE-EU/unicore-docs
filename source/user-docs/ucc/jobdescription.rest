.. _ucc_jobdescription:

Job description format
----------------------

UCC uses the  JSON :ref:`job-description` that is used by the UNICORE :ref:`REST API
<rest-api>`, adding support for handling local files.

Several complete job samples can be found in the `samples 
<https://github.com/UNICORE-EU/commandline-client/tree/master/distribution/src/main/samples>`_ 
directory of the distribution.
On Linux, check also the ``/usr/share/unicore/ucc/samples`` directory.


To view an example job showing most of the available options, run:
  
.. code:: console

  $ ucc run -H


(most of the options shown are not mandatory, of course).


UCC extensions to the UNICORE job description format
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

It is often the case that your job requires files from your
local workstation, or you want UCC to download result files once
the job has finished.

UCC achieves this by allowing paths to local files in the ``To`` and/or ``From``
directives of the data staging part(s) in your job.

Local files can be given as an absolute or relative path; in the
latter case the configured output directory will be used as base
directory.

Importing local files into the job workspace
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

To import files from your local computer, you can use the usual
``Imports`` keyword, with a path as the ``From`` argument.

You can of course mix local and remote files. This example shows
some of the possibilities:
::

  {

	"Imports": [ 
	
	#
	# import a local file from the client machine
	# into the job workspace
	#
		  
	  { "From": "/work/data/fileName", "To": "fileName" },
	
	#    
	# import a set of local files from the client machine
	# into the job workspace
	#

	  { "From": "/work/data/pdf/*.pdf", "To": "/" },
  
	#
	# import a remote file from a UNICORE storage using the UFTP protocol
	#
	
	  { "From": "UFTP:https://gw:8080/DEMO-SITE/rest/core/storages/Home/files/testfile",
	    "To": "testfile" },
  
	# create a symlink from a file on the compute machine to the job workspace

	  { "From": "link:/work/data/testfile", "To": "linked-file" },

	# copy a file on the compute machine to the job workspace

	  { "From": "file:/work/data/testfile", "To": "copied-file" },

	],

  }


If for some reason an import fails, but you want the job to run anyway,
there is a flag ``FailOnError`` that can be set to ``false``:
::

 "Imports": [ 

      { "From": "/work/data/fileName",
        "To": "fileName",
        "FailOnError": "false"
      },
  
 ],

.. note::
  UCC supports simple wild cards (``*`` and ``?``) for importing and exporting files.


Exporting result files from the job workspace
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

To export files from the job's working directory to your local machine, use the normal ``Exports`` keyword,
with a file path as the ``To`` argument. Here is an example ``Exports`` section that specifies two exports:
::

  {
    "Exports": [ 
    
      # this exports all png files to a local directory

        { "From": "*.png", "To": "/home/me/images/" },
  
      # this exports a single file to a to local directory
      # failure of this data transfer will be ignored
      
        { "From": "error.log", 
          "To": "/home/me/logs/error.log",
          "FailOnError": "false" },
      
      # this exports to a UNICORE storage

      { "From": "stdout", 
        "To": "https://gw:8080/DEMO-SITE/rest/core/storages/Home/files/results/myjob/stdout"
      },
    ]
  }

As a special case, UCC also supports downloading files from other UNICORE storages
(after the job has finished), using the ``Exports`` keyword:
::

  {
     "Exports": [
     
      # this exports a file from a UNICORE storage
      
        { "From": "https://gw:8080/DEMO-SITE/rest/core/storages/Work/files/somefile",
          "To": "/home/me/somefile"
        },
    ]   
  }


.. _ucc_options:

Common options to UCC
---------------------

The following table lists the options understood by most UCC commands. Most 
commands have additional options. You can always get a summary of all available
options for a command by calling UCC with the ``-h`` or ``--help`` option, for example

.. code:: console

  $ ucc run --help

Since it is not possible to give all the required options on the commandline, 
it is mandatory to create a preferences file containing e.g. your settings for 
keystore, registry etc. 



.. table:: Common options for the UCC
   :width: 100%
   :widths: 40,60
   :class: tight-table

   +----------------------------------------+---------------------------------------+
   | Option (short and long form)           | Description                           |
   +========================================+=======================================+
   | -c,--configuration <Properties_file>   | Properties file containing your       |
   |                                        | preferences. By default, a file       |
   |                                        | ``userhome/.ucc/preferences`` is      |
   |                                        | checked.                              |
   +----------------------------------------+---------------------------------------+
   | -k,--authenticationMethod <auth>       | Authentication method to use          |
   |                                        | (default: X509)                       |
   +----------------------------------------+---------------------------------------+
   | -o,--output <Output_dir>               | Directory for any output produced     |
   |                                        | (default is the current directory)    |
   +----------------------------------------+---------------------------------------+
   | -r,--registry <List_of_Registry_URLs>  | The comma-separated list of URLs of   |
   |                                        | UNICORE registries                    |
   +----------------------------------------+---------------------------------------+
   | -v,--verbose                           | Verbose mode                          |
   +----------------------------------------+---------------------------------------+ 
   | -h,--help                              | Print help message                    |
   +----------------------------------------+---------------------------------------+
   | -y,--with-timing                       | Timing mode                           |
   +----------------------------------------+---------------------------------------+


User preferences
~~~~~~~~~~~~~~~~

If you have multiple user IDs or are a member of multiple Unix Groups on the target system,
you may wish to control the user attributes that are used when invoking UCC.

Here is a list of options related to user attributes.

.. table:: User attribute options
   :width: 100%
   :widths: 30,70
   :class: tight-table

   +------------------------------+---------------------------------------+
   | Option (short and long form) |  Description                          |
   +==============================+=======================================+
   | -Z, --preference             | Select from your remote attributes    |
   |                              | (e.g. xlogin)                         |
   +------------------------------+---------------------------------------+

The preference option accepts multiple arguments of the form *<name>:<value>* 
where name

.. table:: User attribute options
   :width: 100%
   :widths: 30,70
   :class: tight-table

   +----------+-----------------------------------------+
   | Name     |  Description                            |
   +==========+=========================================+
   | uid      |  Remote login                           |
   +----------+-----------------------------------------+
   | pgid     |  Primary group ID                       |
   +----------+-----------------------------------------+
   | supgids  |  Secondary group IDs (comma-separated)  |
   +----------+-----------------------------------------+
   | role     |  UNICORE role (user, admin, ...)        |
   +----------+-----------------------------------------+
   | vo       |  virtual organisation                   |
   +----------+-----------------------------------------+


Configuration file
~~~~~~~~~~~~~~~~~~

By default, UCC checks for the existence of a file ``<userhome>/.ucc/preferences`` and reads
settings from there. As shown above, you can use a different file by specifying
it on the commandline using the ``-c`` option.

The configuration file can contain default settings for many commandline options,
which are given in the form ``<option name>=<value>``  where <option name> is the long
form of the option. The property values may contain variables in the form ``${VAR_X}``,
which are automatically replaced with the environmental variable values with the same name.
Additionally a special variable ``${UCC_CONFIG}`` is recognized and is replaced with the
absolute path of your configuration file. 

The most important part of configuration is how UCC should authenticate you to the UNICORE
server(s) and what server(s) should be trusted.

An overview of the available authentication options can be retrieved using

.. code:: console

  $ ucc help-auth

A minimal example for using the *quickstart* installation would be
::

  registry=https://localhost:8080/DEMO-SITE/services/Registry?res=default_registry
  
  authenticationMethod=username
  username=demouser
  password=test123
  
  truststore.type=directory
  truststore.directoryLocations.1=<path to CA file(s)>


.. important::
  To protect your passwords, you should make the file non-readable by others,
  for example on Unix using a command such as ``chmod 600 preferences``


.. note::
  If required passwords are not given in the properties file,
  they will be queried interactively.



Username and password authentication
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To authenticate with username and password, set the following
::

  authenticationMethod=username
  username=<your remote username>
  password=<your remote password>


.. _oidc-agent: https://github.com/indigo-dc/oidc-agent

Support for token based authentication
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

UCC has three different options for using token-based authentication

* via oidc-agent 
* directly contact an OIDC server as an OIDC client (requires client ID and secret)
* specify the token directly as a config property


OIDC-Agent
^^^^^^^^^^

UCC supports the `oidc-agent <https://github.com/indigo-dc/oidc-agent>`__ tool that 
allows to interact with common OIDC servers to retrieve new access tokens.

To configure oidc-agent, UCC supports the following properties

.. include:: tables/oidc-agent-properties.rest

..
 .. csv-table:: Options for oidc-agent
  :file: tables/oidc-agent-properties.csv
  :widths: 20, 20, 20, 40
  :header-rows: 1
  :class: tight-table

Your config file would require at least::

  authenticationMethod=oidc-agent
  oidc-agent.account=<oidc-agent account to be used>


OIDC Server
^^^^^^^^^^^

This is a low-level approach that requires the details on how to act
as an OIDC client, you'll need at least an OIDC token endpoint, client
ID and secret.

.. include:: tables/oidc-server-properties.rest

..
 .. csv-table:: Options for oidc-server
  :file: tables/oidc-server-properties.csv
  :widths: 20, 20, 20, 40
  :header-rows: 1
  :class: tight-table


::

  authenticationMethod=oidc-server
  oidc.endpoint=<oidc server token endpoint>
  oidc.username=...
  oidc.password=...

Bearer token in config
^^^^^^^^^^^^^^^^^^^^^^

Last not least, if you have a Bearer token via some other means, you
can directly put the token into your config file::

  authenticationMethod=bearer-token
  token=...

Certificate-based authentication
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

For UNICORE installations that support (or even require) client
certficates for authentication, set::

  authenticationMethod=X509
  
  credential.path=<your keystore>
  credential.password=XXXXXXX


.. include:: tables/ucc-credProperties.rest

..
 .. csv-table:: Credential properties
  :file: tables/ucc-credProperties.csv
  :widths: 20, 20, 20, 40
  :header-rows: 1
  :class: tight-table


Truststore options
~~~~~~~~~~~~~~~~~~

In most cases you only need a truststore directory containing trusted
certificates::

  truststore.type=directory
  truststore.directoryLocations.1=/trust/dir/*.pem

A full list of options related to truststore management is available
in the following table:

.. include:: tables/ucc-trustProperties.rest

..
 .. csv-table:: Truststore properties
  :file: tables/ucc-trustProperties.csv
  :widths: 20, 20, 15, 45
  :header-rows: 1
  :class: tight-table


Trust store examples
~~~~~~~~~~~~~~~~~~~~

Here are some examples for commonly used trust store 
configurations.

Most commonly used is a directory (with a minimal set of options)
::

  truststore.type=directory
  truststore.directoryLocations.1=/trust/dir/*.pem


OpenSSL trust store::

  truststore.type=openssl
  truststore.opensslPath=/etc/grid-security/
  truststore.opensslNsMode=EUGRIDPMA_GLOBUS_REQUIRE
  truststore.updateInterval=1200
  truststore.crlMode=IF_VALID



Java keystore used as a trust store::

  truststore.type=keystore
  truststore.keystorePath=/some/dir/truststore.jks
  truststore.keystoreFormat=JKS
  truststore.keystorePassword=xxxxxx


Client options
~~~~~~~~~~~~~~

The configuration file may also contain low-level options, for example if you need to 
specify connection timeouts, http proxies etc. 

.. include:: tables/ucc-clientProperties.rest

..
 .. csv-table:: Client options
  :file: tables/ucc-clientProperties.csv
  :widths: 20, 20, 15, 45
  :header-rows: 1
  :class: tight-table


Other options
~~~~~~~~~~~~~

The following table lists other options, that are more rarely used.

.. table:: Other options for the UCC
   :align: left
   :width: 100%
   :widths: 30,70
   :class: tight-table

   +------------------+--------------------------------------+
   | Property name    | Description                          |
   +==================+======================================+
   | blacklist        | Comma separated *patterns* for sites |
   |                  | / URLs to ignore                     |
   +------------------+--------------------------------------+
   | contact-registry | Do not attempt to contact the        |
   |                  | registry, even if one is configured  |
   +------------------+--------------------------------------+

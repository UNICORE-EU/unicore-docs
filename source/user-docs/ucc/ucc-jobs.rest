.. _ucc_jobs:

|run-jobs-img| Running jobs
---------------------------

.. |run-jobs-img| image:: ../../_static/run-jobs.png
	:height: 32px
	:align: middle

Introduction
~~~~~~~~~~~~
  
The UCC can run jobs specified in the JSON job description format that
is used by the UNICORE :ref:`REST API <rest-api>`, plus a few extensions related to
handling of local files, submission options, etc. See
:ref:`ucc_jobdescription` for all the details.

In the following it is assumed that you have UCC installed
:ref:`ucc_install` and tried some examples :ref:`ucc_quickstart`.

For example, assume the file *myjob.u* looks as follows:

.. code:: json

  {
    "ApplicationName": "Date"
  }

To run this through UCC, issue the following command:

.. code:: console

  $ ucc run myjob.u
  
This will submit the job, wait for completion, download the stdout and
stderr files, and place them in your default output directory. The ``run``
command has a number of options, to see all the possibilities use the
built-in help:

.. code:: console

  $ ucc run -h


Controlling the output location and file names
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Output files will be placed in the directory given by the ``-o`` option, if not given, the current
directory is used. Also, file names will be put into a subdirectory named as the job id, 
to prevent accidental overwriting of existing files. This behaviour can be changed using the 
``-b`` option. When ``-b`` is given on the command line, no subdirectory will be created.

Specifying the site
^^^^^^^^^^^^^^^^^^^

In the example above, a random site will be chosen to execute the
job. To control it, you can use the ``-s`` option.  This will accept the
name of a target system. The target systems available to you can be
listed by

.. code:: console

  $ ucc list-sites


Accessing a job's working directory
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Using the UCC's data management functions, the job working directory
can be accessed at any time after job submission. Please see section
:ref:`ucc_datamanagement` for details.

.. _ucc-options-overview:

Options overview
~~~~~~~~~~~~~~~~

The following options are available when running jobs (see also the general options overview 
in :ref:`ucc_options`):

.. table:: Job submission options for UCC
   :width: 100%
   :widths: 30,70
   :class: tight-table

   +------------------------------+----------------------------------------------------------------------+
   | Option (Short and long form) | Description                                                          |
   +==============================+======================================================================+
   | -a,--asynchronous            | Run asynchronously                                                   |
   +------------------------------+----------------------------------------------------------------------+
   | -A,--allocation  <URL>       | Submit into the given allocation                                     |
   +------------------------------+----------------------------------------------------------------------+
   | -b,--brief                   | Do not create a sub-directory for output files                       |
   +------------------------------+----------------------------------------------------------------------+
   | -B,--broker                  | Select the type of resource broker to use (see ``run -h`` for        |
   |                              | a list)                                                              |
   +------------------------------+----------------------------------------------------------------------+
   | -d,--dry-run                 | Don't actually submit anything                                       |
   +------------------------------+----------------------------------------------------------------------+
   | -J,--multi-threaded          | For each job file listed on the command line, launch a thread        |
   +------------------------------+----------------------------------------------------------------------+
   | -s,--sitename <SITE>         | Site where the job shall be run                                      |
   +------------------------------+----------------------------------------------------------------------+
   | -S,--schedule <Time>         | Schedule the submission of the job at the given time                 |
   +------------------------------+----------------------------------------------------------------------+
   | -o,--output <Output_dir>     | Directory for any output produced (default is the current directory) |
   +------------------------------+----------------------------------------------------------------------+

  
Resource selection
~~~~~~~~~~~~~~~~~~

In general the user selects the execution site.

If no site is specified upon submission, UCC will select a matching site, where
the requirements (resources, applications) are met.

In case there are other types of brokers available, they can be
selected using the ``-B`` or ``--broker`` option.

* LOCAL (default): brokering is done by UCC itself

To see if other brokers exist, execute ``ucc run -h``, the available
options will be listed in the help for the ``-B`` option.


Processing jobs asynchronously  
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In case of long-running jobs, you will want to run the job
asynchronously, i.e. just submit the job, stage in any files and start
it, in order to get the results later.


Asynchronous submission
^^^^^^^^^^^^^^^^^^^^^^^

Use the ``-a`` flag when submitting a job:
  
.. code:: console

  $ ucc run -a <job file>


This will submit the job, stage-in any local files, start the job and exit.
A job file will be written that contains information about the job endpoint
and any exports that should be performed once the job has finished.
You can use this file later with the ``get-output`` and ``job-status`` commands.

Get the status of particular jobs
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The command 

.. code:: console

  $ ucc job-status <job_file_or_url> <job_file_or_url_2> ...

will retrieve the status of the given jobs. If not given on the command line, a 
job URL will be read from the console.

The arguments can be either a job URL, or the name of a job file (as
written by the ``run -a`` command).


Download results
^^^^^^^^^^^^^^^^
    
To get stdout and stderr as well as other files marked for export, do:

.. code:: console

  $ ucc get-output -o <outdir> <job_file_or_url> <job_file_or_url_2> ...

Here, the option ``-o`` specifies the directory where to put the output,
by default the current directory is used. As before, a job address
can also be read from the console.


Referencing a job by its URL (endpoint address)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

In case you want to check on a job not submitted through UCC, you can
refer to a job by its URL.  The :ref:`list-jobs <list-jobs>` command will produce a
list of all job URLs that you can access.

Note that in this case UCC will only retrieve stdout and stderr files. To download
other result files, you'll have to use the data movement functions described 
in :ref:`ucc_datamanagement`.

  
Scheduling job submission to the batch system
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Sometimes a user wishes to control the time when a job is
submitted to the batch queue, for example, because he/she knows that
a certain queue will be empty at that time.

To schedule a job, you can either use the ``-S`` option to the ucc ``run``
command:

.. code:: console

  $ ucc run -S "12:24" ...

Alternatively, you can specify the start time in your job file using the ``Not before`` keyword:

.. code:: json

  {
    "Not before": "12:30",
  }

In both cases, the specified start time can be given in the brief "HH:mm" (hours and minutes) 
format shown above, or in the full ISO 8601 format including year, date, time and time zone:

.. code:: json

  {
   "Not before": "2011-12-24T12:30:00+0200",
  }

Using allocations
^^^^^^^^^^^^^^^^^

Batch systems such as Slurm support allocations, i.e. the user can get a chunk of resources for a certain time,
into which jobs can then be submitted. This allows a more "interactive" use of an HPC system, where you only have
to wait once for the allocation to be granted, then subsequent jobs will be launched immediately.

To create an allocation, you need to lauch a job of type ``ALLOCATE``, containing only resource requests:

.. code:: json

  {
    "Job type": "ALLOCATE",

    "Resources": {
      "Nodes" : "1",
      "Runtime": "1h"
    }

  }

If you run this with "ucc run", a new job will be created, which is not yet executing anything.
The job URL can then be used with a subsequent "ucc run -A <url>

.. code:: console

  $ export ALLOCATION=$(ucc run -a allocation.u)
  $ ucc run -A $ALLOCATION yourjob1.u yourjob2.u

Note that you should submit the allocation job asynchronously, otherwise ucc would wait for it to end.
Also note that the allocation needs to be in state "RUNNING" before it can accept any jobs.

Executing a command
~~~~~~~~~~~~~~~~~~~

If you just want to execute a simple command remotely (i.e. without data staging, 
resource specifications etc), you can use the ``exec`` command. 

This will run the given command remotely (similarly to ``ssh``), and print the 
output to the console. You can specify the site with the ``-s`` option.
If you do not specify the site, a random site will be chosen.

UNICORE will run the command on the login node, it will not be submitted to the 
batch system.

For example, try

.. code:: console

  $ ucc exec /bin/date

To safely pass arguments to the executable, use "--" to end the UCC part of
the command line, for example

.. code:: console

  $ ucc exec -- date --rfc-email

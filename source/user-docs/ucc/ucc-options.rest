.. _ucc_options:

|options-list-img| Common options to UCC
----------------------------------------

.. |options-list-img| image:: ../../_static/options-list.png
	:height: 32px
	:align: middle

The following table lists the options understood by most UCC commands. Most 
commands have additional options. You can always get a summary of all available
options for a command by calling UCC with the ``-h`` or ``--help`` option, for example,

.. code:: console

  $ ucc run --help

Since it is not possible to give all the required options on the commandline, 
it is recommended to create a preferences file containing e.g. your settings for 
keystore, registry, etc. 



.. table:: Common options for the UCC
   :width: 100
   :widths: 40,60
   :class: tight-table

   +----------------------------------------+---------------------------------------+
   | Option (short and long form)           | Description                           |
   +========================================+=======================================+
   | -c,--configuration <Properties_file>   | Properties file containing your       |
   |                                        | preferences. By default, a file       |
   |                                        | ``$HOME/.ucc/preferences`` is         |
   |                                        | checked.                              |
   +----------------------------------------+---------------------------------------+
   | -k,--authentication-method <auth>      | Authentication method to use          |
   |                                        | (default: USERNAME)                   |
   +----------------------------------------+---------------------------------------+
   | -o,--output <Output_dir>               | Directory for any output produced     |
   |                                        | (default is the current directory)    |
   +----------------------------------------+---------------------------------------+
   | -r,--registry <List_of_Registry_URLs>  | The comma-separated list of URLs of   |
   |                                        | UNICORE registries                    |
   +----------------------------------------+---------------------------------------+
   | -v,--verbose                           | Verbose mode                          |
   +----------------------------------------+---------------------------------------+ 
   | -h,--help                              | Print help message                    |
   +----------------------------------------+---------------------------------------+
   | -y,--with-timing                       | Timing mode                           |
   +----------------------------------------+---------------------------------------+


User preferences
~~~~~~~~~~~~~~~~

If you have multiple user IDs or belong to multiple Unix groups that are 
mapped within UNICORE on the target system, you may want to control which 
user attributes are used when invoking UCC.

Here is a list of options related to user attributes:

.. table:: User attribute options
   :width: 100%
   :widths: 30,70
   :class: tight-table

   +------------------------------+---------------------------------------+
   | Option (short and long form) |  Description                          |
   +==============================+=======================================+
   | -Z, --preference             | Select from your remote attributes    |
   |                              | (e.g. xlogin)                         |
   +------------------------------+---------------------------------------+

The ``preference`` option accepts multiple arguments of the form *<name>:<value>* 
where *name*:

.. table:: User attribute options
   :width: 100%
   :widths: 30,70
   :class: tight-table

   +----------+-----------------------------------------+
   | Name     |  Description                            |
   +==========+=========================================+
   | uid      |  Remote login                           |
   +----------+-----------------------------------------+
   | pgid     |  Primary group ID                       |
   +----------+-----------------------------------------+
   | supgids  |  Secondary group IDs (comma-separated)  |
   +----------+-----------------------------------------+
   | role     |  UNICORE role (user, admin, ...)        |
   +----------+-----------------------------------------+
   | vo       |  virtual organisation                   |
   +----------+-----------------------------------------+


.. _config-file:

Configuration file
~~~~~~~~~~~~~~~~~~

By default, UCC checks for the existence of a file :file:`{<userhome>}/.ucc/preferences` and reads
settings from it.  If the file does not exist, it will be created when you run your first 
UCC command. As shown above, you can specify a different configuration file 
on the command line using the ``-c`` option.

The configuration file can include default settings for many command-line options,
provided in the format *<option name>=<value>*  where *<option name>* referes to the long
form of the option. The property values may include variables in the form ``${VAR_X}``,
which are automatically replaced with the corresponding environment variable values.
Additionally, a special variable ``${UCC_CONFIG}`` is recognized and will be replaced with the
absolute path of your configuration file. 

The most important part of configuration is specifying how UCC should authenticate you to 
the UNICORE server(s) and which server(s) should be trusted.

An overview of the available authentication options can be obtained using the following command:

.. code:: console

  $ ucc help-auth

A minimal example for using the *quickstart* installation would be:
::

  registry=https://localhost:8080/DEMO-SITE/services/Registry?res=default_registry
  
  authentication-method=username
  username=demouser
  password=test123
  
  truststore.type=directory
  truststore.directoryLocations.1=<path to CA file(s)>


.. important::
  To protect your passwords, you should make the file unreadable by others -
  for example, on Unix systems, by using a command such as:
  ``chmod 600 preferences``.


.. note::
  If required passwords are not specified in the properties file,
  they will be requested interactively.



Username and password authentication
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To authenticate with username and password, set the following:
::

  authentication-method=username
  username=<your remote username>
  password=<your remote password>


.. _oidc-agent: https://github.com/indigo-dc/oidc-agent

Support for token based authentication
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

UCC has three different options for using token-based authentication:

* via oidc-agent 
* directly contact an OIDC server as an OIDC client (requires client ID and secret)
* specify the token directly as a config property


OIDC-Agent
^^^^^^^^^^

UCC supports the `oidc-agent <https://github.com/indigo-dc/oidc-agent>`__ tool that 
allows to interact with common OIDC servers to retrieve new access tokens.

To configure oidc-agent, UCC supports the following properties:

.. csv-table:: Options for oidc-agent
  :file: tables/oidc-agent-properties.csv
  :widths: 20, 20, 25, 35
  :header-rows: 1
  :class: tight-table

Your :ref:`config file <config-file>` would require at least:
::

  authentication-method=oidc-agent
  oidc-agent.account=<oidc-agent account to be used>


.. _oidc-server:

OIDC Server
^^^^^^^^^^^

This is a low-level approach that requires the details on how to act
as an OIDC client, you'll need at least an OIDC token endpoint, client
ID and secret.

.. csv-table:: Options for oidc-server
  :file: tables/oidc-server-properties.csv
  :widths: 20, 20, 25, 35
  :header-rows: 1
  :class: tight-table


::

  authentication-method=oidc-server
  oidc.endpoint=<oidc server token endpoint>
  oidc.username=...
  oidc.password=...

UCC also supports sending a one-time password (OTP) to Keycloak. To enable this feature, 
add the following line to your configuration::


  oidc.otp=QUERY


This setting causes UCC to prompt for the OTP on the command line. 
Alternatively, the OTP value can be provided directly in the preferences file, e.g.::

.. ``oidc.otp=your_otp_value`` 


UCC stores the refresh token (if available) and tries to use it before falling back
to username/password authentication - even accross multiple UCC invocations. 
By default, the token is stored in the file :file:`$HOME/.ucc/refresh-tokens`.
This location can be changed using a configuration variable.

Bearer token in config
^^^^^^^^^^^^^^^^^^^^^^

Last not least, if you have a Bearer token via some other means, you
can directly put the token into your :ref:`config file <config-file>`::

  authentication-method=bearer-token
  token=...

Certificate-based authentication
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

For UNICORE installations that support (or even require) client
certficates for authentication, configure the following settings::

  authentication-method=X509
  credential.path=<your keystore>
  credential.password=XXXXXXX

Replace *<your keystore>* with the path to your client certificate 
keystore, and provide the corresponding password.


 .. csv-table:: Credential properties
  :file: tables/ucc-credProperties.csv
  :widths: 20, 20, 20, 40
  :header-rows: 1
  :class: tight-table


Truststore options
~~~~~~~~~~~~~~~~~~

In most cases, you only need a truststore directory containing trusted
certificates::

  truststore.type=directory
  truststore.directoryLocations.1=/trust/dir/*.pem

A full list of options related to truststore management is available
in the following table:

.. csv-table:: Truststore properties
  :file: tables/ucc-trustProperties.csv
  :widths: 20, 20, 15, 45
  :header-rows: 1
  :class: tight-table


Truststore examples
~~~~~~~~~~~~~~~~~~~

Below are some examples for commonly used trust store 
configurations.

The most common setup is a **directory-based truststore**, which requires minimal configuration:

.. code-block:: ini

   truststore.type=directory
   truststore.directoryLocations.1=/trust/dir/*.pem


An **OpenSSL-based truststore** can be configured as follows:

.. code-block:: ini

   truststore.type=openssl
   truststore.opensslPath=/etc/grid-security/
   truststore.opensslNsMode=EUGRIDPMA_GLOBUS_REQUIRE
   truststore.updateInterval=1200
   truststore.crlMode=IF_VALID



To use a **Java keystore** as a truststore, use this configuration:

.. code-block:: ini

   truststore.type=keystore
   truststore.keystorePath=/some/dir/truststore.jks
   truststore.keystoreFormat=JKS
   truststore.keystorePassword=xxxxxx


Client options
~~~~~~~~~~~~~~

The configuration file may also contain low-level options, for example, if you need to 
specify connection timeouts, HTTP proxies, other advanced networking settings. 

.. csv-table:: Client options
  :file: tables/ucc-clientProperties.csv
  :widths: 20, 20, 15, 45
  :header-rows: 1
  :class: tight-table


Other options
~~~~~~~~~~~~~

The following table lists additional options, that are less commonly used:

.. table:: Other options for the UCC
   :align: left
   :width: 100%
   :widths: 30,70
   :class: tight-table

   +------------------+--------------------------------------+
   | Property name    | Description                          |
   +==================+======================================+
   | blacklist        | Comma separated *patterns* for sites |
   |                  | / URLs to ignore                     |
   +------------------+--------------------------------------+
   | contact-registry | Do not attempt to contact the        |
   |                  | registry, even if one is configured  |
   +------------------+--------------------------------------+

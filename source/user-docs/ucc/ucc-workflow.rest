.. _ucc_workflow:

|workflow-img| Workflows 
------------------------

.. |workflow-img| image:: ../../_static/workflow.png
	:height: 32px
	:align: middle

Introduction
~~~~~~~~~~~~

UCC supports the UNICORE :ref:`Workflow service <workflow-description>` and allows 
to submit workflows and manage them.

The workflows are executed server-side, and UCC is used only for
submitting, managing data and getting results. UCC also provides
helper features for dealing with the workflows' input/output data and
parametrised workflow templates.

.. note::
  Version 8.x of the Workflow service has changed a lot, and existing
  7.x XML workflows will need to be converted / refactored.


Command overview
~~~~~~~~~~~~~~~~

The following commands are provided:
  
  - ``workflow-submit``: submit a workflow file
  
  - ``workflow-control``:  abort or resume a running workflow 
  
  - ``list-workflows``: list information about workflows

More details and examples follow below.
  
Basic use
~~~~~~~~~

To check the availability of the Workflow service in the configured
registry, issue the following command:

.. code:: console

  $ ucc system-info -l

This should show at least one accessible Workflow service.

The distribution includes some example workflow files in the ``samples/workflows`` directory 
which you can edit and submit. For example:
  
.. code:: console

  $ ucc workflow-submit twostep.json

This command submits a workflow with two jobs and prints the workflow's URL to the standard output.

To list all your workflows, use ``list-workflows`` command:

.. code:: console

  $ ucc list-workflows

To get the status of a specific workflow specify the workflow's URL:

.. code:: console

  $ ucc list-workflows <workflow_address> -l

This also lists all jobs submitted within the workflow.

To get the working directory of a specific job, run:

.. code:: console

  $ ucc list-job <job_address> -l
  
To display the content of the stdout file of a specific job:

.. code:: console

  $ ucc cat <job_working_directory>/files/stdout


Workflow description format
~~~~~~~~~~~~~~~~~~~~~~~~~~~

The JSON format used by that the Workflow service can be found
:ref:`here <workflow-description>`.


Managing workflow data
~~~~~~~~~~~~~~~~~~~~~~

Importing local data for use by a workflow
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

If you have local files that need to be imported before starting
the workflow, you can use a normal UCC job file that 
contains only an ``Imports`` section::

  {
   "Imports": 
   [
     { "From": "local_file_1", "To": "wf:workflow_file_name_1", },
     { "From": "local_file_2", "To": "wf:workflow_file_name_2", },
   ...
   ],
  }

UCC will upload the local files to a remote storage (which you can specify)
and automatically register them with the workflow upon submission.

Your workflow JSON can then reference them as ``wf:...`` in the workflow
activities.

You can also *manually* register files by adding in ``inputs`` section to your
workflow JSON.

.. code:: json

  {
   "inputs": {
     "wf:infile1" : "remote_url_1",
     "wf:infile2" : "remote_url_2", 
   },
  }


Workflow templates
^^^^^^^^^^^^^^^^^^

If the workflows contains a ``Template parameters`` section, the
corresponding replacement will be done by reading parameter values
from the ``.u`` file. These so-called *workflow templates* can be a very
simple and safe way to make adjustments in complex workflows before
submission. As an example, consider the following workflow:

.. code:: json

  {
    "Template parameters": {
	"SLEEPTIME": {
	   "type" : "INTEGER",
	   "default": "10",
	}
    },
   
    "activities" : [
	{
	    "id": "sleep1",
	    "job": {
		"Executable": "sleep",
		"Arguments": ["${SLEEPTIME}"],
	    },
	},
    ],
  }

This introduces a parameter *SLEEPTIME* with default value *10*.

When the workflow is submitted, you can specify a JSON file with the ``-u`` option,
which will be checked for a parameter named *SLEEPTIME*

.. code:: json

  {
    "SLEEPTIME": "1",
  }

and if present, the value will be replaced in the workflow.


Resuming a held workflow
~~~~~~~~~~~~~~~~~~~~~~~~

A workflow in status ``HELD`` can be resumed using the workflow-control ``resume`` command. If the workflow
has variables/parameters, updated values can be sent with the ``resume`` command.
